<?xml version='1.0' encoding='UTF-8'?>
<root>
 <tabbed_widget parent="main_window" name="Main Window">
  <Tab containers="1" tab_name="tab1">
   <Container>
    <DockSplitter count="3" sizes="0.509351;0.240924;0.249725" orientation="-">
     <DockArea name="...">
      <plot style="Lines" flip_y="false" flip_x="false" mode="TimeSeries">
       <range left="1717161588.474262" right="1717161646.086244" top="1.797587" bottom="-0.905154"/>
       <limitY/>
       <curve color="#ff7f0e" name="/hri_prediction_node/human_filt_pos/poses[4]/position/y"/>
       <curve color="#17becf" name="/hri_prediction_node/human_meas_pos/poses[4]/position/y"/>
       <curve color="#bcbd22" name="robot_position"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot style="Lines" flip_y="false" flip_x="false" mode="TimeSeries">
       <range left="1717161588.474262" right="1717161646.086244" top="1.576946" bottom="-1.486410"/>
       <limitY/>
       <curve color="#f14cc1" name="/hri_prediction_node/human_filt_vel/poses[4]/position/y"/>
       <curve color="#1ac938" name="robot_speed"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot style="Lines" flip_y="false" flip_x="false" mode="TimeSeries">
       <range left="1717161588.474262" right="1717161646.086244" top="5.328661" bottom="-9.483352"/>
       <limitY/>
       <curve color="#9467bd" name="/hri_prediction_node/human_filt_acc/poses[4]/position/y"/>
       <curve color="#1f77b4" name="robot_acceleration">
        <transform alias="robot_acceleration[Moving Average]" name="Moving Average">
         <options compensate_offset="false" value="200"/>
        </transform>
       </curve>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <currentTabIndex index="0"/>
 </tabbed_widget>
 <use_relative_time_offset enabled="0"/>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <Plugins>
  <plugin ID="DataLoad CSV">
   <parameters time_axis="" delimiter="0"/>
  </plugin>
  <plugin ID="DataLoad MCAP"/>
  <plugin ID="DataLoad ROS bags">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
   <selected_topics value=""/>
  </plugin>
  <plugin ID="DataLoad ULog"/>
  <plugin ID="ROS Topic Subscriber">
   <use_header_stamp value="true"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="1000"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
   <selected_topics value="/hri_prediction_node/human_filt_acc;/hri_prediction_node/human_filt_pos;/hri_prediction_node/human_filt_vel;/hri_prediction_node/human_meas_pos;/hri_prediction_node/predicted_hri_state;/hri_prediction_node/predicted_hri_state/lcl;/hri_prediction_node/predicted_hri_state/pj;/hri_prediction_node/predicted_hri_state/pj/lcl;/hri_prediction_node/predicted_hri_state/pj/ucl;/hri_prediction_node/predicted_hri_state/ucl;/hri_prediction_node/predicted_hri_variance;/hri_prediction_node/predicted_hri_variance/pj;/offline/tf"/>
  </plugin>
  <plugin ID="UDP Server"/>
  <plugin ID="WebSocket Server"/>
  <plugin ID="ZMQ Subscriber"/>
  <plugin ID="Fast Fourier Transform"/>
  <plugin ID="Quaternion to RPY"/>
  <plugin ID="Reactive Script Editor">
   <library code="--[[ Helper function to create a ScatterXY series from arrays.&#xa;&#xa; series_name: name of the created ScatterXY series&#xa; prefix:      prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value.&#xa;             if [nil], the index of the array will be used.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{N}/position/x&#xa;   /trajectory/node.{N}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   CreateSeriesFromArray( &quot;my_trajectory&quot;, &quot;/trajectory/node&quot;,  &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;]]--&#xa;&#xa;function CreateSeriesFromArray( series_name, prefix, suffix_X, suffix_Y, timestamp )&#xa;  --- create a new series or overwite the previous one&#xa;  new_series = MutableScatterXY.new(series_name)&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_x == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;"/>
   <scripts/>
  </plugin>
  <plugin ID="CSV Exporter"/>
  <plugin ID="ROS /rosout Visualization"/>
  <plugin ID="ROS Topic Re-Publisher"/>
 </Plugins>
 <!-- - - - - - - - - - - - - - - -->
 <previouslyLoaded_Datafiles/>
 <previouslyLoaded_Streamer name="ROS Topic Subscriber"/>
 <!-- - - - - - - - - - - - - - - -->
 <customMathEquations>
  <snippet name="robot_acceleration">
   <global>firstX = 0
firstY = 0
is_first = true
secondX = 0
secondY = 0
is_second = false</global>
   <function>-- Wait for initial values
if (is_first) then
  is_first = false
  is_second = true
  firstX = time
  firstY = value
end

if (is_second) then
  is_second = false
  secondX = time
  secondY = value
end

-- Central derivative: dy/dx ~= f(x+delta_x)-f(x-delta_x)/(2*delta_x)
dx = time - firstX
dy = value - firstY
-- Increment
firstX = secondX
firstY = secondY
secondX = time
secondY = value

return dy/dx</function>
   <linked_source>robot_speed</linked_source>
  </snippet>
  <snippet name="robot_position">
   <global>firstX = 0
firstY = 0
is_first = true
secondX = 0
secondY = 0
is_second = false</global>
   <function>return -value</function>
   <linked_source>/offline/tf/base/tool0_controller/translation/x</linked_source>
  </snippet>
  <snippet name="robot_speed">
   <global>firstX = 0
firstY = 0
is_first = true
secondX = 0
secondY = 0
is_second = false</global>
   <function>-- Wait for initial values
if (is_first) then
  is_first = false
  is_second = true
  firstX = time
  firstY = value
end

if (is_second) then
  is_second = false
  secondX = time
  secondY = value
end

-- Central derivative: dy/dx ~= f(x+delta_x)-f(x-delta_x)/(2*delta_x)
dx = time - firstX
dy = value - firstY
-- Increment
firstX = secondX
firstY = secondY
secondX = time
secondY = value

return dy/dx</function>
   <linked_source>robot_position</linked_source>
  </snippet>
 </customMathEquations>
 <snippets/>
 <!-- - - - - - - - - - - - - - - -->
</root>

